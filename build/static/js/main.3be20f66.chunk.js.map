{"version":3,"sources":["assets/bgSectionHome3.png","sections/Home/index.js","components/NavigationBar/index.js","config/axios.js","components/MenuLogin/index.js","serviceWorker.js","index.js","pages/Home/index.js"],"names":["module","exports","Home","id","style","backgroundImage","bgSectionHome","className","rows","placeholder","type","value","htmlFor","useStyles","makeStyles","title","flexGrow","root","backgroundColor","position","login","color","NavigationBar","toggle","setToggle","classes","AppBar","Toolbar","IconButton","Typography","variant","Button","onClick","menu","document","documentElement","scrollTop","api","axios","create","baseURL","timeout","MenuLogin","useState","setLogin","responseGoogle","response","profileObj","name","email","googleId","imageUrl","console","log","userID","urlImg","graphDomain","a","post","data","useEffect","recordUser","display","transition","appId","process","autoLoad","fields","scope","callback","url","picture","cssClass","textButton","clientId","render","renderProps","disabled","buttonText","onSuccess","onFailure","Boolean","window","location","hostname","match","ReactDOM","ToggleContext","React","createContext","Provider","Consumer","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3be20f66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgSectionHome3.8b34cea7.png\";","import React from 'react';\r\nimport bgSectionHome from '../../assets/bgSectionHome3.png';\r\nimport './styles.css';\r\n\r\n\r\nexport default function Home() {\r\n\r\n    return (\r\n        <section id=\"sectionHome\" style={{ backgroundImage: `url(${bgSectionHome})` }}>\r\n            <div className=\"leftSideHome\">\r\n                <p>A internet é a porta de entrada para que o mundo, o objetivo é fazer o mundo conhecer o que\r\n                    você faz.</p>\r\n\r\n                <p>Sabemos que as vezes o objetivo é menor, fazer apenas a cidade ou poucas pessoas conhecerem,\r\n                    talvez as pessoas certas, e bom, a internet funciona pra isso também :)</p>\r\n\r\n                <p>A tecnologia aplicada ao seu trabalho pode ser o diferencial entre você e seu concorrente!</p>\r\n            </div>\r\n            <div className=\"rightSideHome\">\r\n                <form>\r\n                    <div className=\"formHeaderHome\">\r\n                        <h2>Se interessou?</h2>\r\n                        <p>Ótimo! Para te ajudar preciso saber um pouco mais de você, vai ser rápido ;)</p>\r\n                    </div>\r\n                    <div className=\"formBodyHome\">\r\n                        <div className=\"formItemHome\">\r\n                            <label>Com o que você trabalha?</label>\r\n                            <textarea rows=\"5\" placeholder=\"Apenas um breve resumo do que você faz ..\"></textarea>\r\n                        </div>\r\n\r\n                        <div className=\"formItemHome\">\r\n                            <label>Qual seu interesse na tecnologia para o seu trabalho?</label>\r\n                            <div className=\"inputGroupHome\">\r\n                                <div><input id=\"homeOpSite\" type=\"checkbox\" value=\"site\" /> <label htmlFor=\"homeOpSite\">Ter um site para divulgar meu trabalho</label></div>\r\n                                <div><input id=\"homeOpEcommerce\" type=\"checkbox\" value=\"ecommerce\" /> <label htmlFor=\"homeOpEcommerce\">Uma loja virtual para aumentar minhas\r\n                                    vendas</label></div>\r\n                                <div><input id=\"homeOpSistema\" type=\"checkbox\" value=\"sistema\" /> <label htmlFor=\"homeOpSistema\">Ter um sistema para controlar processos\r\n                                    (vendas, orçamentos, negócios, projetos, etc)</label></div>\r\n                                <div><input id=\"homeOpApp\" type=\"checkbox\" value=\"aplicativo\" /> <label htmlFor=\"homeOpApp\">Ter um aplicativo para atender uma\r\n                                    necessidade especifica do meu negócio</label></div>\r\n                                <div><input id=\"homeOpFiscal\" type=\"checkbox\" value=\"fiscal\" /> <label htmlFor=\"homeOpFiscal\">Atender as responsabilidades fiscais de\r\n                                    forma automatizada</label></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"formItemHome\">\r\n                            <label>Nenhuma das opções satisfaz o que precisa?</label>\r\n                            <textarea rows=\"5\" placeholder=\"O que poderiamos fazer pra te ajudar?\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"formItemHome\">\r\n                        <button>Enviar Informações</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    root: {\r\n        backgroundColor: 'rgba(75,0,130);',\r\n        position: 'sticky'\r\n    },\r\n    login: {\r\n        color: '#f5f5f5'\r\n    }\r\n}))\r\n\r\nexport default function NavigationBar({ toggle, setToggle }) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <AppBar className={classes.root}>\r\n                <Toolbar>\r\n                    <IconButton>\r\n                        <MenuIcon className={classes.login} />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Helplace\r\n                    </Typography>\r\n                    <Button onClick={() => {\r\n                        setToggle({ menu: !toggle.menu })\r\n                        document.documentElement.scrollTop = 0;\r\n                    }} className={classes.login}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    );\r\n}\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3333',\r\n    timeout: 20000\r\n})\r\n\r\nexport default api;","import React, { useState, useEffect } from 'react';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport GoogleLogin from 'react-google-login';\r\nimport api from '../../config/axios';\r\nimport 'dotenv/config';\r\n\r\nimport './styles.css';\r\n\r\nexport default function MenuLogin({ toggle, setToggle }) {\r\n    const [login, setLogin] = useState(null);\r\n    const [modifyUser, setModifyUser] = useState();\r\n\r\n    const responseFacebook = response => {\r\n        const { name, email, userID, graphDomain } = response;\r\n        const { url } = response.picture.data;\r\n        setLogin({ name, email, userID, urlImg: url, graphDomain })\r\n    }\r\n    const responseGoogle = response => {\r\n       const {name, email, googleId, imageUrl} = response.profileObj;\r\n       console.log('print profileObj')\r\n       console.log(response);\r\n       setLogin({name, email, userID: googleId, urlImg: imageUrl, graphDomain: 'google'})\r\n    }\r\n\r\n    function showMenuLogin() {\r\n        if (toggle.menu) {\r\n            return 'flex'\r\n        } else {\r\n            return 'none'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (login !== null) {\r\n            recordUser(login)\r\n        }\r\n    }, [login])\r\n\r\n    async function recordUser() {\r\n        const response = await api.post('/setUser', login)\r\n        console.log('verifica se gravou os dados no banco corretamente')\r\n        console.log('retorno => ', response.data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"containerMenuLogin\" style={{ display: showMenuLogin(), transition: `display 3s` }}>\r\n            <div className=\"MenuLoginHeader\">\r\n                <label>Escolha a rede social que mais gosta!</label>\r\n            </div>\r\n            <div className=\"containerOptionsLogin\">\r\n                <div className=\"itemOptionsLogin\">\r\n                    <FacebookLogin\r\n                        appId={process.env.REACT_APP_API_ID_FACEBOOK}\r\n                        autoLoad={false}\r\n                        fields=\"name, email, picture\"\r\n                        scope=\"public_profile, email, user_birthday\"\r\n                        callback={responseFacebook}\r\n                        cssClass=\"btnLoginFacebook\"\r\n                        textButton=\"facebook\"\r\n                    />\r\n                </div>\r\n                <div className=\"itemOptionsLogin\">\r\n                    <GoogleLogin\r\n                        clientId={process.env.REACT_APP_API_ID_GOOGLE}\r\n                        render={renderProps => (\r\n                            <button className=\"btnLoginGoogle\" onClick={renderProps.onClick} disabled={renderProps.disabled}>Gmail</button>\r\n                        )}\r\n                        buttonText=\"LOGIN WITH GOOGLE\"\r\n                        onSuccess={responseGoogle}\r\n                        onFailure={responseGoogle}\r\n                        autoLoad={false}\r\n                    />\r\n                </div>\r\n                <div className=\"itemOptionsLogin\">\r\n                    <button className=\"btnLoginGithub\">Github</button>\r\n                </div>\r\n                <div className=\"itemOptionsLogin\">\r\n                    <button className=\"btnLoginTwitter\">Twitter</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport HomePage from '../src/pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\r\nimport SectionHome from '../../sections/Home';\r\nimport ComponentNavigationBar from '../../components/NavigationBar';\r\nimport ComponentMenuLogin from '../../components/MenuLogin';\r\n\r\n\r\n\r\nexport default function Home() {\r\n\r\n    const [toggle, setToggle] = useState({\r\n        menu: false\r\n    })\r\n\r\n    const ToggleContext = React.createContext({\r\n        menu: false\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <ToggleContext.Provider value={{ toggle, setToggle }}>\r\n                <ToggleContext.Consumer>\r\n                    {\r\n                        ( {toggle, setToggle} ) => (\r\n                            <>\r\n                                <ComponentNavigationBar {...{ toggle, setToggle }} />\r\n                                <ComponentMenuLogin {...{ toggle, setToggle }} />\r\n                                <SectionHome />\r\n                            </>\r\n                        )\r\n                    }\r\n                </ToggleContext.Consumer>\r\n            </ToggleContext.Provider>\r\n        </>\r\n    );\r\n}\r\n"],"sourceRoot":""}